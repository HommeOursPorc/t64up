#!/bin/sh
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:/home/root:
USERAGENT="Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/109.0"
alias yget="/usr/bin/wget -T 15 -U \"$USERAGENT\" --header \"Cache-Control: no-cache\""
. nvram_ops
trap ctrl_c SIGINT

# Tomato64 Upgrade Script -- HommeOursPorc 2024/08
ver="v0.16"

help() {
echo -e "Tomato64 Upgrade Script $ver

Usage: t64up [options] [firmware path or URL]

Default is 'dirty' upgrade (NVRAM untouched) unless '-c' is specified.

Single option:
  --check          Print latest Tomato64 version number.

Options:
  --erase-nvram    Erase all data in NVRAM memory (thorough).
                   Can be used with '-f'.
  -c               Clean upgrade (delete all settings).
  -d <path>        Overrides default download directory (/tmp/t64upwd/).
  -f               Use Fast-Reboot. Run locally the first time to 
                   ensure correct functionality.
  -n               Use wget '--no-check-certificate'
                   (you can try this if wget fail to download the firmware).
  -o               Only download firmware (no installation).
  -y               Automatic 'YES' to prompts. USE WITH CAUTION!

Infos:
 - Single option are meant to be run without any other arguments.
 - URL must begin with \"http(s)://\".
 - Supported format is tzst.

WARNING:
   This script comes with no guarantee.
   This script, especially with option '-y', could be dangerous!
   Make sure you are using the right firmware before proceeding!
   
I'm NOT responsible for any bricked devices. Use at your own risks.
   
USE WITH CAUTION!\n"
}

error() {
    # $1 = ERROR No
    e=3
    m="" # message
    case $1 in
        1)  m="Unknown argument.";;
        2)  m="Too many arguments.";;
        3)  m="Firmware path or URL is missing.";;
        #4)  m="No USB device found. Settings restoration is not possible.";;
        #5)  m="nvram_backup is missing. Settings restoration is not possible.";;
        6)  m="Firmware format not supported.";;
        7)  m="Out of memory, not enough RAM.";;
        8)  m="Unable to download firmware.";;
        9)  m="Firmware doesn't exist or file is empty.";;
        #10) m="ZIP archive is corrupted.";;
        #11) m="Can't unzip archive, it's either corrupted or not enough RAM.";;
        #12) m="ZIP archive countain zero or more than one firmware.";;
        #13) m="";;
        #14) m="Backup is missing. Settings restoration is not possible.";;
        15) e=5; m="Operation cancelled.";;
        16) m="Can't fetch newest version number from GitHub.";;
        17) m="Destination directory doesn't exist.";;
        #18) m="";;
        #19) m="";;
        20) m="Checksum didn't match.";;
        21) m="Firmware URL is missing.";;
        22) m="Firmware doesn't match system boot firmware (BIOS or UEFI). Make sure you are using the right firmware for your device or try to upgrade without option '-y'.";;
        23) m="Disk space insufficient.";;
        24) m="zst archive is corrupted."
    esac
    ilog $e "$m"
    rm -f ${WORKDIR}/*
    exit $1
}

ilog() {
    # $1 = logger Priority (logger -p)
    # $2 = message to log
    case $1 in
        7) e="DEBUG" ;;
        6) e="INFO" ;;
        5) e="NOTICE" ;;
        4) e="WARNING" ;;
        3) e="ERROR" ;;
    esac
    logger -p $1 -t $(basename "$0")[$$] "$2"
    [ $1 -le 4 ] && echo "$e: $2" || echo "$2"
}

ctrl_c() {
    kill $(jobs -p)
    echo; error 15
}

wait_loop() {
    # $1 = wait time in seconds
    # $2 = msg to print
    c=$1
    while [ $c -gt 0 ]; do
        echo -ne "$2 $c\033[0K\r"
        sleep 1
        : $((c--))
    done
}

check_update() {
    LATESTVER="$(yget -q --no-check-certificate -O- "https://raw.githubusercontent.com/tomato64/tomato64/master/tomato64/version")"
    [ "$LATESTVER" == "" ] && error 16
    echo -e "Current version = $CURVER\nLatest  version = $LATESTVER"
    [ $(echo $LATESTVER | tr -d ".") -gt $(echo $CURVER | tr -d ".") ] && echo "UPDATE AVAILABLE!"
}

enough_memory() {
    # $1 = FWSIZE
    # enoughmem = 0 --> no (not enough)
    # enoughmem = 1 --> yes (proceed)
    SIZE=$(((${1}*5)/2))
    AVAIL=$(awk '/MemAvailable/ {print $2}' /proc/meminfo)
    [ $SIZE -ge $AVAIL ] && echo 0 || echo 1
}

enough_disk_space() {
    # $1 = FWSIZE
    # enough_disk_space = 0 --> no (not enough)
    # enough_disk_space = 1 --> yes (proceed)
    SIZE=$(((${1}*3)/2))
    AVAIL=$(df / | tail -n1 | awk '{print $4}')
    [ $SIZE -ge $AVAIL ] && echo 0 || echo 1
}

verify() {
    printf "Verifying file... "
    [ ! -s "$FWPATH" ] && return 9
    [ $(file "$FWPATH" | grep -ci "Zstandard compressed data") -eq 0 ] && return 6
    zstd -q --test "$FWPATH" || return 24
    printf "Done\n"
    if [ $OFFICIAL -eq 1 ]; then
        echo "Verifying checksum..."
        sumpath="${FWURL%/*}/sha256.txt"
        SRCSUM="$(yget -q $NOCHECK -O- "$sumpath" | grep "${filename%.*}" | awk '{print $2}')"
        [ "$SRCSUM" != "" ] && {
            FWSUM="$(sha256sum "$FWPATH" | awk '{print $1}')"
            echo "Source   sha256 sum = $SRCSUM"
            echo "Firmware sha256 sum = $FWSUM"
            [ "$SRCSUM" == "$FWSUM" ] && { echo "Checksum Match!"; return 0; } || return 1
        } || {
            return 1
        }
    fi
}

download() {
    # Set path for download
    [ "$DLDIR" != "" ] && DESTDIR="$DLDIR" || DESTDIR="$WORKDIR"
    [ "$(df -P "$DESTDIR" | tail -n1 | awk '{print $1}')" == "tmpfs" ] && TMPFS=1
    filename="$(echo $filename | sed "s/%2B/+/g")"
    FWPATH="${DESTDIR}/$filename"
    [ -e "$FWPATH" -a $OFFICIAL -eq 1 ] && {
        echo "Firmware already exist."
        verify && {
            echo "Firmware OK"
            return 0
        } || {
            rm -f "$FWPATH"
            echo "File error, re-downloading..."
        }
    }
    
    # Get file size and check if enough space and memory
    yget -qS --spider $NOCHECK "$FWURL" 2>"${WORKDIR}/yget.out"
    [ $? -eq 0 -a $(grep -ci "content-length" "${WORKDIR}/yget.out") -eq 1 ] && FWSIZE=$(($(awk 'tolower($0) ~ /content-length/ {print $2}' "${WORKDIR}/yget.out")/1024)) || FWSIZE=250000
    rm -f "${WORKDIR}/yget.out"
    [ $(enough_disk_space $FWSIZE) -eq 0 ] && error 23
    [ $(enough_memory $FWSIZE) -eq 0 ] && error 7
    
    # Download firmware
    yget $NOCHECK -O "$FWPATH" "$FWURL" || error 8
     
    # Verify firmware checksum if downloaded from officials sources (tomato64.org or Tomato64 GitHub repo)
    [ $OFFICIAL -eq 1 ] && {
        verify
        VERIFY=$?
        if [ $VERIFY -gt 1 ]; then
            error $?
        elif [ $VERIFY -eq 1 ]; then
            ilog 3 "Impossible to verify downloaded firmware checksum or checksum doesn't match!"
            [ $AUTOYES -eq 1 ] && { rm -f "$FWPATH" ; error 20 ; }
            [ $ONLY -eq 1 ] && printf "Keep it" || printf "Continue"
            printf " anyway? $MSG"
            read ANSWER ; echo
            [ "$ANSWER" != "yes" ] && { rm -f "$FWPATH" ; error 15 ; }
        fi
    }
    [ $ONLY -eq 1 ] && printf "Download completed.\n\n" || printf "\n"
}

prep_file() {
    # Set FWPATH if no firmware download
    [ "$FWPATH" == "" ] && {
        FWPATH="$FWURL"
        verify || error $?
        [ "$(df -P "$FWPATH" | tail -n1 | awk '{print $1}')" == "tmpfs" ] && TMPFS=1
        FWSIZE=$(du "$FWPATH" | awk '{print $1}')
        [ $(enough_disk_space $FWSIZE) -eq 0 ] && error 23
        [ $TMPFS -eq 0 ] && { [ $(enough_memory $FWSIZE) -eq 0 ] && error 7 ; }
    }
    
    # Check if correct version BIOS or UEFI
    WARN=0
    GRUB=$(tar tf "$FWPATH" | grep -ci "/boot/grub/grub.cfg")
    if [ "$BOOT" == "UEFI" -a $GRUB -ne 0 ] || [ "$BOOT" == "BIOS" -a $GRUB -eq 0 ]; then WARN=1; fi
    [ $WARN -eq 1 ] && {
        [ $AUTOYES -eq 1 ] && error 22
        ilog 4 "Firmware doesn't match system boot firmware (BIOS or UEFI)."
        echo "Firmware: $filename"
        echo "System boot firmware: $BOOT"
        printf "\nContinue anyway (NOT RECOMMENDED)? $MSG"
        read ANSWER ; echo
        [ "$ANSWER" != "yes" ] && error 15
    }
    
    # Getting things in place before flashing
    [ $TMPFS -eq 0 ] && {
        cp -f "$FWPATH" "$WORKDIR" || error 7
        FWPATH="${WORKDIR}/${filename}"
    }
}

prepare_upgrade() {
    # Prepare firmware flashing
    sync
    c=10; while [ "$(nvram get action_service)" -a $c -gt 0 ];do c=$((c-1));echo -ne "Please wait... $c\033[0K\r";sleep 1;done
    nvram set action_service="upgrade-start"
    sleep 1
    kill -s SIGUSR1 1
    c=60; while [ "$(nvram get action_service)" -a $c -gt 0 ];do c=$((c-1));echo -ne "Stopping services... $c\033[0K\r";sleep 1;done; printf "Stopping services... Done\n"
    sleep 1
    /usr/bin/mount_nvram
}

t64_upgrade() {
    # Write firmware file
    ilog 6 "Writing firmware $filename"
    [ -e "${WORKDIR}/t64up.out" ] && rm -f ${WORKDIR}/t64up.out
    nohup /sbin/upgrade ${FWPATH} > ${WORKDIR}/t64up.out 2>/dev/null &
    c=0; until [ "$(pidof upgrade)" ];do c=$((c+1)); [ $c -le 21 ] && { echo -ne "Please wait... $c\033[0K\r"; usleep 500000; } || break ; done
    c=0; while [ "$(pidof upgrade)" ];do c=$((c+1)); echo -ne "Writing firmware... $c\033[0K\r";sleep 1;done; printf "Writing firmware... Done\n"
    sleep 2
    
    # Check if flash successful
    if [ ! -s "${WORKDIR}/t64up.out" ] || [ -s "${WORKDIR}/t64up.out" -a $(grep -ci "image successfully flashed" "${WORKDIR}/t64up.out") -eq 0 ]; then
        ilog 3 "Writing of ${filename} unsuccessful!!"
        ilog 3 "$(cat "${WORKDIR}/t64up.out" | sort -u)"
        echo -e "\nSomething went wrong. The router is NOT upgraded. The router will reboot.\n"
        echo -e "To cancel the reboot and retry the upgrade manually press 'Ctrl+C'\n"
        wait_loop 10 "Rebooting in"
        FASTREBOOT=0
        rboot
        exit
    fi
    rm -f ${WORKDIR}/*
    ilog 6 "Successfully flashed $filename"
}

erase_nvram() {
    echo "Erasing nvram... "
    rm /nvram/*
    sleep 1
    ilog 6 "nvram erased"
}

rboot() {
    sync
    if [ $FASTREBOOT -eq 1 ]; then
        /sbin/fast-reboot &
    else
        /sbin/reboot &
    fi
    c=1;while true;do sleep 1;c=$((c+1));echo -ne "$c\033[0K\r";done
    exit
}


# Global Variables
WORKDIR="/tmp/t64upwd"
MSG="To continue type [yes], to cancel type [n]: "
OPTIONS=""
MODE=""
REMOTE=0
OFFICIAL=0
DLDIR=""
SETDIR=0
NOCHECK=""
ONLY=0
ERASE=0
AUTOYES=0
FASTREBOOT=0
FWPATH=""
FWURL=""
FWSIZE=0
filename=""
extension=""
TMPFS=0
OSVER="$(NG os_version)"
CURVER="$(echo "$OSVER" | awk '{print $1}')" # eg 2023.3
[ -d /sys/firmware/efi ] && BOOT="UEFI" || BOOT="BIOS"


# Check and set arguments
[ $# -eq 0 ] && { help; exit 0; }
[ $# -eq 1 ] && { [ "$1" == "help" -o "$1" == "-h" -o "$1" == "--help" ] && { help; exit 0; } }
[ $# -eq 1 ] && { [ "$1" == "--check" ] && { check_update; exit 0; } }
[ $# -eq 1 ] && { [ "$1" == "--erase-nvram" ] && ERASE=1; }
[ $# -eq 2 -a $(echo "$@" | grep -c "\-\-erase-nvram") -eq 1 ] && {
    for a in "$@"; do
        case $a in
            --erase-nvram) ERASE=1;;
                       -f) FASTREBOOT=1;;
                        *) error 1;;
        esac
    done
}
for a in "$@"; do
    [ $ERASE -eq 1 ] && break
    [ "$(echo "$a" | cut -c1)" == "-" ] && {
        a="$(echo "$a" | tr -d "-")"
        [ "$a" == "" ] && error 1
        OPTIONS="$(echo "$a" | grep -o . )"
        for o in $OPTIONS; do
            case $o in
                c) [ "$MODE"     == "" ] && MODE="clean" || error 2 ;;
                d) [ "$DLDIR"    == "" ] && SETDIR=1     || error 2 ;;
                f) [ $FASTREBOOT -eq 0 ] && FASTREBOOT=1 || error 2 ;;
                n) [ "$NOCHECK"  == "" ] && NOCHECK="--no-check-certificate" || error 2 ;;
                o) [ $ONLY       -eq 0 ] && ONLY=1       || error 2 ;;
                y) [ $AUTOYES    -eq 0 ] && AUTOYES=1    || error 2 ;;
                *) error 1 ;;
            esac
        done
    } || {
        [ $SETDIR -eq 1 ] && { [ -d "$a" ] && { DLDIR="$a" ; SETDIR=0 ; continue ; } || error 17 ; }
        [ "$FWURL" == "" ] && {
            [ $(echo "$a" | grep -qi "^http"; echo $?) -eq 0 ] && REMOTE=1
            [ $(echo "$a" | grep -Eqi "^http(|s)://(|www\.)(tomato64.org/|github\.com/tomato64/tomato64/releases/download/)"; echo $?) -eq 0 ] && OFFICIAL=1
            FWURL="$a"
        } || {
            error 2
        }
    }
done
[ $ONLY -eq 1 -a $FASTREBOOT -eq 1 ] && error 2
[ $ERASE -eq 0 -a "$FWURL" == "" ] && error 3
[ "$FWURL" != "" ] && {
    filename="$(basename "$FWURL")"
    extension="${filename##*.}"
    [ "$extension" != "tzst" ] && error 6
    [ $REMOTE -eq 0 ] && { [ ! -s "$FWURL" ] && error 9 ; }
}
[ "$DLDIR" != "" ] && { case "$DLDIR" in ./) DLDIR="." ;; ../) DLDIR=".." ;; esac ; }
[ "$DLDIR" != ""  -a $REMOTE -eq 0 ] && error 21
[ ! -d "$WORKDIR" -a $ERASE  -eq 0 ] && mkdir "$WORKDIR"
[ $ONLY -eq 1 ] && { [ "$MODE" == "" -a $AUTOYES -eq 0 ] && { [ $REMOTE -eq 1 ] && { download ; exit 0 ; } || error 21 ; } || error 2 ; }
[ "$MODE" == "" ] && MODE="dirty"


# Main
[ $ERASE -eq 1 ] && {
    printf "\n\n                POINT OF NO RETURN\n\n"
    printf "Erase all data in NVRAM memory (thorough)? $MSG"
    read ANSWER ; echo
    [ "$ANSWER" != "yes" ] && error 15
    { prepare_upgrade ; erase_nvram ; rboot ; } &
    wait
} || {
    [ $REMOTE -eq 1 ] && download
    prep_file
    printf "\n\n                POINT OF NO RETURN\n\n"
    echo -e "Make sure you are using the right firmware before proceeding!\n"
    echo "Firmware: $filename"
    echo "System boot firmware: $BOOT"
    echo -e "\nProceed $MODE upgrade with firmware '$filename' ?"
    [ $AUTOYES -eq 1 ] && {
        printf "\n\nTo cancel press CTRL+C\n\n"
        wait_loop 7 "Upgrade starting in"
    } || {
        printf "$MSG"
        read ANSWER ; echo
        [ "$ANSWER" != "yes" ] && error 15
    }
    ilog 6 "Starting $MODE upgrade with firmware '$filename'"
    # starting upgrade in background to prevent disconnection incidents
    {
    prepare_upgrade
    t64_upgrade
    [ "$MODE" == "clean" ] && erase_nvram
    rboot
    } &
    wait
}

exit 0